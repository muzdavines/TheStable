using UnityEngine;

namespace CoverShooter
{
    /// <summary>
    /// Instantiates a prefab and manages it, based on events generated by other AI components.
    /// </summary>
    public class HoldPositionMarker : MonoBehaviour
    {
        /// <summary>
        /// Target marker that projects a texture.
        /// </summary>
        [Tooltip("Target marker that projects a texture.")]
        public GameObject Prefab;

        private GameObject _marker;

        private void Awake()
        {
            if (Prefab == null)
                return;

            _marker = GameObject.Instantiate(Prefab);
            _marker.transform.SetParent(null, true);
        }

        /// <summary>
        /// Catch the AI command to hold a position and set the marker to it.
        /// </summary>
        public void OnHoldPosition(Vector3 value)
        {
            if (_marker == null)
                return;

            if (!_marker.activeSelf)
                _marker.SetActive(true);

            _marker.transform.position = value + Vector3.up * 0.5f;
        }

        /// <summary>
        /// Hide the marker once the AI stops holding a position.
        /// </summary>
        public void OnStopHoldingPosition()
        {
            hideMarker();
        }

        private void OnDisable()
        {
            hideMarker();
        }

        private void hideMarker()
        {
            if (_marker != null && _marker.activeSelf)
                _marker.SetActive(false);
        }
    }
}
